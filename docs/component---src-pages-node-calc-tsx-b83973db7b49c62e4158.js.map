{"version":3,"sources":["webpack:///./src/pages/node-calc.tsx"],"names":["getHistogram","skillsList","nodes","answer","Object","assign","keys","map","skill","getStarter","nodesMet","histogram","key","ResultView","result","style","marginTop","node","i","JSON","stringify","marginLeft","entries","num","NodeCalcPage","useState","setResult","working","setWorking","input","setInput","handleChangeInput","useCallback","event","target","value","htmlAttributes","lang","name","content","onChange","placeholder","onClick","setTimeout","userInput","lines","split","skills","Set","n","length","Error","add","push","parseInput","calculateBestNodes","availableNodes","usedNodes","firstNodes","has","bestNumNodes","bestResult","attempt","newAvailable","filter","numNodes","disabled"],"mappings":"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","file":"component---src-pages-node-calc-tsx-b83973db7b49c62e4158.js","sourcesContent":["import {ChangeEvent, useCallback, useState} from 'react';\nimport {Helmet} from 'react-helmet';\n\ntype NodeType = [string, string, string];\ntype Histogram = Record<string, number>;\ntype SkillsList = Set<string>;\n\nfunction getStarter(skillsList: SkillsList): Histogram {\n  return Object.assign(\n    {},\n    ...[...skillsList.keys()].map((skill) => ({[skill]: 0})),\n  );\n}\n\nfunction getHistogram(\n  skillsList: SkillsList,\n  nodes: Array<NodeType>,\n): Record<string, number> {\n  const answer = getStarter(skillsList);\n\n  for (const node of nodes) {\n    for (const skill of node) {\n      answer[skill] = answer[skill] + 1;\n    }\n  }\n\n  return answer;\n}\n\nfunction nodesMet(histogram: Histogram): number {\n  let answer = 0;\n  for (const key in histogram) {\n    answer = answer + histogram[key];\n  }\n\n  return answer;\n}\n\ntype Result = [Array<NodeType>, Histogram];\n\nfunction calculateBestNodes(\n  skillsList: SkillsList,\n  availableNodes: Array<NodeType>,\n  usedNodes: Array<NodeType>,\n): Result | null {\n  const answer = [...usedNodes];\n  const histogram = getHistogram(skillsList, answer);\n\n  const firstNodes = new Set<string>();\n  for (const node of usedNodes) {\n    if (firstNodes.has(node[0])) {\n      return null;\n    }\n\n    firstNodes.add(node[0]);\n  }\n\n  if (availableNodes.length === 0) {\n    return [answer, histogram];\n  }\n\n  for (const key in histogram) {\n    if (histogram[key] > 2) {\n      return null;\n    }\n  }\n\n  if (nodesMet(histogram) === 18) {\n    return [answer, histogram];\n  }\n\n  let bestNumNodes: number = answer.length;\n  let bestResult: Result = [answer, histogram];\n\n  for (const node of availableNodes) {\n    const attempt = [...answer, node];\n    const newAvailable = [...availableNodes].filter((n) => n !== node);\n\n    const result = calculateBestNodes(skillsList, newAvailable, attempt);\n    if (result == null) {\n      continue;\n    }\n    const [, resultHistogram] = result;\n    const numNodes = nodesMet(resultHistogram);\n\n    if (numNodes > bestNumNodes) {\n      bestNumNodes = numNodes;\n      bestResult = result;\n    }\n  }\n\n  return bestResult;\n}\n\ntype UserInput = {\n  nodes: Array<NodeType>;\n  skills: SkillsList;\n};\n\nfunction parseInput(input: string): UserInput {\n  const lines = input.split('\\n');\n\n  const nodes: Array<NodeType> = [];\n  const skills = new Set<string>();\n\n  for (const line of lines) {\n    const n = line.split(' ');\n    if (n.length !== 3) {\n      throw new Error('Bad Parsing');\n    }\n\n    for (const skill of n) {\n      skills.add(skill);\n    }\n\n    nodes.push(n as [string, string, string]);\n  }\n\n  return {\n    nodes,\n    skills,\n  };\n}\n\nfunction ResultView({result}: {result: Result | null}) {\n  if (result == null) {\n    return null;\n  }\n\n  const [nodes, histogram] = result;\n\n  return (\n    <div style={{marginTop: '32px'}}>\n      <span>Nodes:</span>\n      <ul>\n        {nodes.map((node, i) => (\n          <li key={i}>{JSON.stringify(node)}</li>\n        ))}\n      </ul>\n      <span>Allocation:</span>\n      <table style={{marginLeft: '32px'}}>\n        {Object.entries(histogram).map(([node, num]) => (\n          <tr key={node}>\n            <td>{node}</td>\n            <td>{num}</td>\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n}\n\nexport default function NodeCalcPage() {\n  const [result, setResult] = useState<[Array<NodeType>, Histogram] | null>(\n    null,\n  );\n  const [working, setWorking] = useState(false);\n  const [input, setInput] = useState('');\n\n  const handleChangeInput = useCallback(\n    (event: ChangeEvent<HTMLTextAreaElement>) => {\n      setInput(event.target.value);\n    },\n    [],\n  );\n\n  function test() {\n    setWorking(true);\n    setTimeout(() => {\n      const userInput = parseInput(input);\n      setResult(calculateBestNodes(userInput.skills, userInput.nodes, []));\n      setWorking(false);\n    }, 0);\n  }\n\n  return (\n    <div>\n      <Helmet htmlAttributes={{lang: 'en'}}>\n        <title>Maplestory TriNode Solver</title>\n        <meta name=\"description\" content=\"Thinking is too hard.\" />\n      </Helmet>\n      <div>\n        <textarea\n          value={input}\n          onChange={handleChangeInput}\n          placeholder={'SkillA SkillB SkillC\\nSkillD SkillE SkillF'}\n        />\n        <br />\n        <button onClick={test} disabled={working}>\n          {working ? 'Solving...' : 'Solve'}\n        </button>\n        <ResultView result={result} />\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}