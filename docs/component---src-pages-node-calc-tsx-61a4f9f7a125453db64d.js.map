{"version":3,"file":"component---src-pages-node-calc-tsx-61a4f9f7a125453db64d.js","mappings":"mgCAcA,SAASA,EACPC,EACAC,GAIA,IAFA,IAEA,EAFMC,EAXR,SAAoBF,GAClB,OAAOG,OAAOC,OACZ,MACG,IAAIJ,EAAWK,QAAQC,KAAI,SAACC,GAAD,mBAAcA,GAAQ,EAAtB,MAQjBC,CAAWR,GAE1B,IAAmBC,KAAnB,aACE,IADyB,IACzB,MADwB,WACxB,aAA0B,CAAC,IAAhBM,EAAe,QACxBL,EAAOK,GAASL,EAAOK,GAAS,EAIpC,OAAOL,EAGT,SAASO,EAASC,GAChB,IAAIR,EAAS,EACb,IAAK,IAAMS,KAAOD,EAChBR,GAAkBQ,EAAUC,GAG9B,OAAOT,EAKT,SAASU,EACPZ,EACAa,EACAC,GAMA,IAJA,IAIA,EAJMZ,EAAS,IAAIY,GACbJ,EAAYX,EAAaC,EAAYE,GAErCa,EAAa,IAAIC,IACvB,IAAmBF,KAAnB,aAA8B,CAAC,IAApBG,EAAmB,QAC5B,GAAIF,EAAWG,IAAID,EAAK,IACtB,OAAO,KAGTF,EAAWI,IAAIF,EAAK,IAGtB,GAA8B,IAA1BJ,EAAeO,OACjB,MAAO,CAAClB,EAAQQ,GAGlB,IAAK,IAAMC,KAAOD,EAChB,GAAIA,EAAUC,GAAO,EACnB,OAAO,KAIX,GAA4B,KAAxBF,EAASC,GACX,MAAO,CAACR,EAAQQ,GAMlB,IAHA,IAGA,EAHIW,EAAuBnB,EAAOkB,OAC9BE,EAAqB,CAACpB,EAAQQ,GA5BnB,iBA8BJO,EA9BI,QA+BPM,EAAU,IAAIrB,EAAQe,GACtBO,EAAe,IAAIX,GAAgBY,QAAO,SAACC,GAAD,OAAOA,IAAMT,KAEvDU,EAASf,EAAmBZ,EAAYwB,EAAcD,GAC5D,GAAc,MAAVI,EACF,iBAEF,IACMC,EAAWnB,EADWkB,EAA5B,IAGIC,EAAWP,IACbA,EAAeO,EACfN,EAAaK,IAbjB,IAAmBd,KAAnB,aAAmC,IAiBnC,OAAOS,EAqCT,SAASO,EAAT,GAAwD,IAAnCF,EAAkC,EAAlCA,OACnB,GAAc,MAAVA,EACF,OAAO,KAGT,IAAO1B,EAAoB0B,EAA3B,GAAcjB,EAAaiB,EAA3B,GAEA,OACEG,EAAAA,EAAAA,MAAAA,MAAAA,CAAKC,MAAO,CAACC,UAAW,QAAxB,WACEC,EAAAA,EAAAA,KAAAA,OAAAA,CAAAA,SAAAA,YACAA,EAAAA,EAAAA,KAAAA,KAAAA,CAAAA,SACGhC,EAAMK,KAAI,SAACW,EAAMiB,GAAP,OACTD,EAAAA,EAAAA,KAAAA,KAAAA,CAAAA,SAAaE,KAAKC,UAAUnB,IAAnBiB,SAGbD,EAAAA,EAAAA,KAAAA,OAAAA,CAAAA,SAAAA,iBACAA,EAAAA,EAAAA,KAAAA,QAAAA,CAAOF,MAAO,CAACM,WAAY,QAA3B,SACGlC,OAAOmC,QAAQ5B,GAAWJ,KAAI,gBAAEW,EAAF,KAAQsB,EAAR,YAC7BT,EAAAA,EAAAA,MAAAA,KAAAA,CAAAA,SAAAA,EACEG,EAAAA,EAAAA,KAAAA,KAAAA,CAAAA,SAAKhB,KACLgB,EAAAA,EAAAA,KAAAA,KAAAA,CAAAA,SAAKM,MAFEtB,WAUJ,SAASuB,IACtB,OAA4BC,EAAAA,EAAAA,UAC1B,MADKd,EAAP,KAAee,EAAf,KAGA,GAA8BD,EAAAA,EAAAA,WAAS,GAAhCE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAA5BI,EAAP,KAAcC,EAAd,KACA,GAA0BL,EAAAA,EAAAA,UAAwB,MAA3CM,EAAP,KAAcC,EAAd,KAEMC,GAAoBC,EAAAA,EAAAA,cACxB,SAACC,GACCL,EAASK,EAAMC,OAAOC,SAExB,IAiBF,OACEvB,EAAAA,EAAAA,MAAAA,MAAAA,CAAAA,SAAAA,EACEA,EAAAA,EAAAA,MAACwB,EAAAA,EAAD,CAAQC,eAAgB,CAACC,KAAM,MAA/B,WACEvB,EAAAA,EAAAA,KAAAA,QAAAA,CAAAA,SAAAA,+BACAA,EAAAA,EAAAA,KAAAA,OAAAA,CAAMwB,KAAK,cAAcC,QAAQ,8BAEnC5B,EAAAA,EAAAA,MAAAA,MAAAA,CAAAA,SAAAA,EACEG,EAAAA,EAAAA,KAAAA,WAAAA,CACEoB,MAAOR,EACPc,SAAUV,EACVW,YAAa,gDAEf3B,EAAAA,EAAAA,KAAAA,KAAAA,KACAA,EAAAA,EAAAA,KAAAA,SAAAA,CAAQ4B,QA3Bd,WACEjB,GAAW,GACXkB,YAAW,WACT,IACE,IAAMC,EA5Ed,SAAoBlB,GAMlB,IALA,IAKA,EALMmB,EAAQnB,EAAMoB,MAAM,MAEpBhE,EAAyB,GACzBiE,EAAS,IAAIlD,IAEnB,IAAmBgD,KAAnB,aAA0B,CAAC,IAAhBG,EAAe,QACxB,GAAa,KAATA,IAAeA,EAAKC,WAAW,KAAnC,CAIA,IAAM1C,EAAIyC,EAAKF,MAAM,KACrB,GAAiB,IAAbvC,EAAEN,OACJ,MAAM,IAAIiD,MAAM,eAGlB,cAAoB3C,KAApB,aAAuB,CAAC,IAAbnB,EAAY,QACrB2D,EAAO/C,IAAIZ,GAGbN,EAAMqE,KAAK5C,IAGb,MAAO,CACLzB,MAAAA,EACAiE,OAAAA,GAmDsBK,CAAW1B,GAC7BH,EAAU9B,EAAmBmD,EAAUG,OAAQH,EAAU9D,MAAO,KAChE+C,EAAS,MACT,MAAOwB,GACPxB,EAASwB,EAAEC,SAEb7B,GAAW,KACV,IAgBwB8B,SAAU/B,EAAjC,SACGA,EAAU,aAAe,UAElB,MAATI,GAAgBd,EAAAA,EAAAA,KAAAA,OAAAA,CAAAA,SAAOc,IAAgB,MACxCd,EAAAA,EAAAA,KAACJ,EAAD,CAAYF,OAAQA","sources":["webpack://tpcstld-site/./src/pages/node-calc.tsx"],"sourcesContent":["import {ChangeEvent, useCallback, useState} from 'react';\nimport {Helmet} from 'react-helmet';\n\ntype NodeType = [string, string, string];\ntype Histogram = Record<string, number>;\ntype SkillsList = Set<string>;\n\nfunction getStarter(skillsList: SkillsList): Histogram {\n  return Object.assign(\n    {},\n    ...[...skillsList.keys()].map((skill) => ({[skill]: 0})),\n  );\n}\n\nfunction getHistogram(\n  skillsList: SkillsList,\n  nodes: Array<NodeType>,\n): Record<string, number> {\n  const answer = getStarter(skillsList);\n\n  for (const node of nodes) {\n    for (const skill of node) {\n      answer[skill] = answer[skill] + 1;\n    }\n  }\n\n  return answer;\n}\n\nfunction nodesMet(histogram: Histogram): number {\n  let answer = 0;\n  for (const key in histogram) {\n    answer = answer + histogram[key];\n  }\n\n  return answer;\n}\n\ntype Result = [Array<NodeType>, Histogram];\n\nfunction calculateBestNodes(\n  skillsList: SkillsList,\n  availableNodes: Array<NodeType>,\n  usedNodes: Array<NodeType>,\n): Result | null {\n  const answer = [...usedNodes];\n  const histogram = getHistogram(skillsList, answer);\n\n  const firstNodes = new Set<string>();\n  for (const node of usedNodes) {\n    if (firstNodes.has(node[0])) {\n      return null;\n    }\n\n    firstNodes.add(node[0]);\n  }\n\n  if (availableNodes.length === 0) {\n    return [answer, histogram];\n  }\n\n  for (const key in histogram) {\n    if (histogram[key] > 2) {\n      return null;\n    }\n  }\n\n  if (nodesMet(histogram) === 18) {\n    return [answer, histogram];\n  }\n\n  let bestNumNodes: number = answer.length;\n  let bestResult: Result = [answer, histogram];\n\n  for (const node of availableNodes) {\n    const attempt = [...answer, node];\n    const newAvailable = [...availableNodes].filter((n) => n !== node);\n\n    const result = calculateBestNodes(skillsList, newAvailable, attempt);\n    if (result == null) {\n      continue;\n    }\n    const [, resultHistogram] = result;\n    const numNodes = nodesMet(resultHistogram);\n\n    if (numNodes > bestNumNodes) {\n      bestNumNodes = numNodes;\n      bestResult = result;\n    }\n  }\n\n  return bestResult;\n}\n\ntype UserInput = {\n  nodes: Array<NodeType>;\n  skills: SkillsList;\n};\n\nfunction parseInput(input: string): UserInput {\n  const lines = input.split('\\n');\n\n  const nodes: Array<NodeType> = [];\n  const skills = new Set<string>();\n\n  for (const line of lines) {\n    if (line === '' || line.startsWith('#')) {\n      continue;\n    }\n\n    const n = line.split(' ');\n    if (n.length !== 3) {\n      throw new Error('Bad Parsing');\n    }\n\n    for (const skill of n) {\n      skills.add(skill);\n    }\n\n    nodes.push(n as [string, string, string]);\n  }\n\n  return {\n    nodes,\n    skills,\n  };\n}\n\nfunction ResultView({result}: {result: Result | null}) {\n  if (result == null) {\n    return null;\n  }\n\n  const [nodes, histogram] = result;\n\n  return (\n    <div style={{marginTop: '32px'}}>\n      <span>Nodes:</span>\n      <ul>\n        {nodes.map((node, i) => (\n          <li key={i}>{JSON.stringify(node)}</li>\n        ))}\n      </ul>\n      <span>Allocation:</span>\n      <table style={{marginLeft: '32px'}}>\n        {Object.entries(histogram).map(([node, num]) => (\n          <tr key={node}>\n            <td>{node}</td>\n            <td>{num}</td>\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n}\n\nexport default function NodeCalcPage() {\n  const [result, setResult] = useState<[Array<NodeType>, Histogram] | null>(\n    null,\n  );\n  const [working, setWorking] = useState(false);\n  const [input, setInput] = useState('');\n  const [error, setError] = useState<string | null>(null);\n\n  const handleChangeInput = useCallback(\n    (event: ChangeEvent<HTMLTextAreaElement>) => {\n      setInput(event.target.value);\n    },\n    [],\n  );\n\n  function test() {\n    setWorking(true);\n    setTimeout(() => {\n      try {\n        const userInput = parseInput(input);\n        setResult(calculateBestNodes(userInput.skills, userInput.nodes, []));\n        setError(null);\n      } catch (e) {\n        setError(e.message);\n      }\n      setWorking(false);\n    }, 0);\n  }\n\n  return (\n    <div>\n      <Helmet htmlAttributes={{lang: 'en'}}>\n        <title>Maplestory TriNode Solver</title>\n        <meta name=\"description\" content=\"Thinking is too hard.\" />\n      </Helmet>\n      <div>\n        <textarea\n          value={input}\n          onChange={handleChangeInput}\n          placeholder={'SkillA SkillB SkillC\\nSkillD SkillE SkillF'}\n        />\n        <br />\n        <button onClick={test} disabled={working}>\n          {working ? 'Solving...' : 'Solve'}\n        </button>\n        {error != null ? <span>{error}</span> : null}\n        <ResultView result={result} />\n      </div>\n    </div>\n  );\n}\n"],"names":["getHistogram","skillsList","nodes","answer","Object","assign","keys","map","skill","getStarter","nodesMet","histogram","key","calculateBestNodes","availableNodes","usedNodes","firstNodes","Set","node","has","add","length","bestNumNodes","bestResult","attempt","newAvailable","filter","n","result","numNodes","ResultView","_jsxs","style","marginTop","_jsx","i","JSON","stringify","marginLeft","entries","num","NodeCalcPage","useState","setResult","working","setWorking","input","setInput","error","setError","handleChangeInput","useCallback","event","target","value","Helmet","htmlAttributes","lang","name","content","onChange","placeholder","onClick","setTimeout","userInput","lines","split","skills","line","startsWith","Error","push","parseInput","e","message","disabled"],"sourceRoot":""}