{"version":3,"file":"component---src-pages-codenames-index-tsx-14b80e94a33d9354ba3f.js","mappings":"gPAWA,SAASA,EACPC,GAEA,OAAOA,EAAUC,KAAI,SAACC,GAAD,wBAChBA,EADgB,CAEnBC,KAAMC,EAAAA,GAAAA,aCdV,MDkBe,WACb,IAAMC,GAAYC,EAAAA,EAAAA,KAElB,GAA0BC,EAAAA,EAAAA,UAASR,EAAqBM,EAAUG,QAA3DA,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAASV,EAAqBM,EAAUG,UACvC,CAACH,EAAUG,QAQd,IAAMG,EAAcN,EAAUG,MAAMI,QAClC,SAACV,EAAMW,GAAP,OACEX,EAAKC,OAASC,EAAAA,GAAAA,MACdI,EAAMK,GAAOV,OAASC,EAAAA,GAAAA,WACxBU,OACIC,EAAaV,EAAUG,MAAMI,QACjC,SAACV,EAAMW,GAAP,OACEX,EAAKC,OAASC,EAAAA,GAAAA,KACdI,EAAMK,GAAOV,OAASC,EAAAA,GAAAA,WACxBU,OAEF,OACE,UAACE,EAAA,EAAD,YACE,UAACC,EAAA,EAAD,CAAQC,eAAgB,CAACC,KAAM,MAA/B,WACE,0CACA,iBAAMC,KAAK,cAAcC,QAAQ,iCAGnC,gBAAKC,UAAWC,EAAAA,EAAAA,MAAhB,UACE,SAACC,EAAA,EAAD,CAAgBhB,MAAOA,EAAOiB,SAzBpC,SAAsBZ,GACpB,IAAMa,EAAW,IAAIlB,GACrBkB,EAASb,GAAOV,KAAOE,EAAUG,MAAMK,GAAOV,KAC9CM,EAASiB,SAyBP,iBAAKJ,UAAWC,EAAAA,EAAAA,UAAhB,WACE,iBAAMD,UAAWC,EAAAA,EAAAA,KAAjB,SAA+BZ,KAC/B,iBAAMW,UAAWC,EAAAA,EAAAA,IAAjB,SAA8BR","sources":["webpack://tpcstld-site/./src/codenames/CodenamesAgentPage.tsx","webpack://tpcstld-site/./src/pages/codenames/index.tsx"],"sourcesContent":["import {useEffect, useState} from 'react';\nimport {Helmet} from 'react-helmet';\n\nimport PageWrapper from '../info-pages/PageWrapper';\n\nimport {CodenamesBoardType, CodenamesCardType} from './CodenameConstants';\nimport CodenamesBoard from './CodenamesBoard';\nimport useCodenamesGameState from './useCodenamesGameState';\n\nimport styles from './CodenamesAgentPage.module.css';\n\nfunction getInitialBoardState(\n  gameBoard: CodenamesBoardType,\n): CodenamesBoardType {\n  return gameBoard.map((card) => ({\n    ...card,\n    type: CodenamesCardType.UNKNOWN,\n  }));\n}\n\nexport default function CodenamesAgentPage() {\n  const gameState = useCodenamesGameState();\n\n  const [board, setBoard] = useState(getInitialBoardState(gameState.board));\n\n  useEffect(() => {\n    setBoard(getInitialBoardState(gameState.board));\n  }, [gameState.board]);\n\n  function handleSelect(index: number) {\n    const newBoard = [...board];\n    newBoard[index].type = gameState.board[index].type;\n    setBoard(newBoard);\n  }\n\n  const numBlueLeft = gameState.board.filter(\n    (card, index) =>\n      card.type === CodenamesCardType.BLUE &&\n      board[index].type === CodenamesCardType.UNKNOWN,\n  ).length;\n  const numRedLeft = gameState.board.filter(\n    (card, index) =>\n      card.type === CodenamesCardType.RED &&\n      board[index].type === CodenamesCardType.UNKNOWN,\n  ).length;\n\n  return (\n    <PageWrapper>\n      <Helmet htmlAttributes={{lang: 'en'}}>\n        <title>Codenames</title>\n        <meta name=\"description\" content=\"Online codegames player.\" />\n      </Helmet>\n\n      <div className={styles.board}>\n        <CodenamesBoard board={board} onSelect={handleSelect} />\n      </div>\n\n      <div className={styles.remaining}>\n        <span className={styles.blue}>{numBlueLeft}</span>\n        <span className={styles.red}>{numRedLeft}</span>\n      </div>\n    </PageWrapper>\n  );\n}\n","import CodenamesAgentPage from '../../codenames/CodenamesAgentPage';\n\nexport default CodenamesAgentPage;\n"],"names":["getInitialBoardState","gameBoard","map","card","type","CodenamesCardType","gameState","useCodenamesGameState","useState","board","setBoard","useEffect","numBlueLeft","filter","index","length","numRedLeft","PageWrapper","Helmet","htmlAttributes","lang","name","content","className","styles","CodenamesBoard","onSelect","newBoard"],"sourceRoot":""}