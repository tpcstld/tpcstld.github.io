{"version":3,"sources":["webpack:///./src/info-pages/PageWrapper.tsx","webpack:///./src/awake-rps/AwakeRpsPage.module.css","webpack:///./src/info-pages/PageWrapper.module.css","webpack:///./src/awake-rps/AwakeRpsPage.tsx","webpack:///./src/pages/awake-rps.tsx"],"names":["PageWrapper","children","className","styles","outerContainer","container","module","exports","Choices","getProbabilityStyles","probability","bad","good","calculateExpectedValue","currentChosen","winnerChosen","loserChosen","winnerLeft","currentLeft","loserLeft","totalLeft","ev","lossChance","PlaySelector","numItem","setNumItem","name","selectorItem","selectorButton","onClick","disabled","selectorButtonText","selectorItemCount","AnalysisSection","numRock","numPaper","numScissors","expectedValues","ROCK","PAPER","SCISSORS","console","log","bestChoice","Object","entries","sort","firstEv","secondEv","table","tableHeader","heading","map","choice","choices","numbers","toFixed","AwakeRpsPage","useState","setNumRock","setNumPaper","setNumScissors","handleReset","useCallback","Helmet","htmlAttributes","lang","content","header","reset","selectorContainer","dataContainer"],"mappings":"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","file":"component---src-pages-awake-rps-tsx-e03fc89acb5a66260d3f.js","sourcesContent":["import {ReactNode} from 'react';\n\nimport styles from './PageWrapper.module.css';\n\ninterface PageWrapperProps {\n  children: ReactNode;\n}\n\nexport default function PageWrapper({children}: PageWrapperProps) {\n  return (\n    <div className={styles.outerContainer}>\n      <div className={styles.container}>{children}</div>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AwakeRpsPage-module--header--VQpZY\",\"reset\":\"AwakeRpsPage-module--reset--vh3E1\",\"selectorContainer\":\"AwakeRpsPage-module--selectorContainer--3exhp\",\"selectorItem\":\"AwakeRpsPage-module--selectorItem--3iNMu\",\"selectorButton\":\"AwakeRpsPage-module--selectorButton--361F6\",\"selectorButtonText\":\"AwakeRpsPage-module--selectorButtonText--uEPaK\",\"selectorItemCount\":\"AwakeRpsPage-module--selectorItemCount--1295X\",\"table\":\"AwakeRpsPage-module--table--2-Ofj\",\"choices\":\"AwakeRpsPage-module--choices--1Q0ng\",\"numbers\":\"AwakeRpsPage-module--numbers--IeBdJ\",\"heading\":\"AwakeRpsPage-module--heading--3Ipi6\",\"good\":\"AwakeRpsPage-module--good--1Daw_\",\"bad\":\"AwakeRpsPage-module--bad--3vHqh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outerContainer\":\"PageWrapper-module--outerContainer--3VnGW\",\"container\":\"PageWrapper-module--container--1VBnU\"};","import {CSSProperties, useCallback, useState} from 'react';\nimport {Helmet} from 'react-helmet';\n\nimport PageWrapper from '../info-pages/PageWrapper';\n\nimport styles from './AwakeRpsPage.module.css';\n\nenum Choices {\n  ROCK = 'Rock',\n  PAPER = 'Paper',\n  SCISSORS = 'Scissors',\n}\n\nconst MAX_CHOICE = 3;\n\nfunction getProbabilityStyles(probability: number): string {\n  if (probability === 0) {\n    return '';\n  }\n\n  if (probability < 0) {\n    return styles.bad;\n  }\n\n  return styles.good;\n}\n\ntype ExpectedValue = {\n  ev: number;\n  lossChance: number;\n};\n\nfunction calculateExpectedValue(\n  currentChosen: number,\n  winnerChosen: number,\n  loserChosen: number,\n): ExpectedValue {\n  const winnerLeft = MAX_CHOICE - winnerChosen;\n  const currentLeft = MAX_CHOICE - currentChosen;\n  const loserLeft = MAX_CHOICE - loserChosen;\n\n  const totalLeft = winnerLeft + currentLeft + loserLeft;\n\n  return {\n    ev: (1 * winnerLeft + 0 * currentLeft + -1 * loserLeft) / totalLeft,\n    lossChance: loserLeft / totalLeft,\n  };\n}\n\ninterface PlaySelectorProps {\n  numItem: number;\n  setNumItem: (newNum: number) => void;\n  name: Choices;\n}\n\nfunction PlaySelector({numItem, setNumItem, name}: PlaySelectorProps) {\n  return (\n    <div className={styles.selectorItem}>\n      <button\n        className={styles.selectorButton}\n        onClick={() => setNumItem(numItem + 1)}\n        disabled={numItem === MAX_CHOICE}\n      >\n        <span className={styles.selectorButtonText}>{name}</span>\n      </button>\n      <div className={styles.selectorItemCount}>{numItem}</div>\n    </div>\n  );\n}\n\ninterface AnalysisSectionProps {\n  numRock: number;\n  numScissors: number;\n  numPaper: number;\n}\n\nfunction AnalysisSection({\n  numRock,\n  numPaper,\n  numScissors,\n}: AnalysisSectionProps) {\n  if (numRock === 0 && numPaper === 0 && numScissors === 0) {\n    return <span>Rock gang for life!</span>;\n  }\n\n  if (\n    numRock === MAX_CHOICE &&\n    numPaper === MAX_CHOICE &&\n    numScissors === MAX_CHOICE\n  ) {\n    return <span>Press reset for the new round!</span>;\n  }\n\n  const expectedValues = {\n    [Choices.ROCK]: calculateExpectedValue(numRock, numScissors, numPaper),\n    [Choices.PAPER]: calculateExpectedValue(numPaper, numRock, numScissors),\n    [Choices.SCISSORS]: calculateExpectedValue(numScissors, numPaper, numRock),\n  };\n\n  console.log(expectedValues);\n\n  const bestOption = Object.entries(expectedValues).sort(\n    ([_firstChoice, firstEv], [_secondChoice, secondEv]) => {\n      if (firstEv.ev === secondEv.ev) {\n        return 0;\n      }\n\n      return firstEv.ev > secondEv.ev ? -1 : 1;\n    },\n  )[0];\n\n  const bestChoice = bestOption[0];\n\n  return (\n    <table className={styles.table}>\n      <thead className={styles.tableHeader}>\n        <th className={styles.heading}>Choice</th>\n        <th className={styles.heading}>EV</th>\n        <th className={styles.heading}>Loss</th>\n      </thead>\n      {Object.entries(expectedValues).map(([choice, ev]) => (\n        <tr key={choice}>\n          <td\n            className={`${styles.choices} ${\n              bestChoice === choice ? styles.good : ''\n            }`}\n          >\n            {choice}\n          </td>\n          <td className={`${styles.numbers} ${getProbabilityStyles(ev.ev)}`}>\n            {ev.ev.toFixed(2)}\n          </td>\n          <td\n            className={`${styles.numbers} ${getProbabilityStyles(\n              -ev.lossChance,\n            )}`}\n          >\n            {ev.lossChance.toFixed(2)}\n          </td>\n        </tr>\n      ))}\n    </table>\n  );\n}\n\nexport default function AwakeRpsPage() {\n  const [numRock, setNumRock] = useState(0);\n  const [numPaper, setNumPaper] = useState(0);\n  const [numScissors, setNumScissors] = useState(0);\n\n  const handleReset = useCallback(() => {\n    setNumRock(0);\n    setNumPaper(0);\n    setNumScissors(0);\n  }, []);\n\n  return (\n    <PageWrapper>\n      <Helmet htmlAttributes={{lang: 'en'}}>\n        <title>Awake RPS Calculator</title>\n        <meta\n          name=\"description\"\n          content=\"MapleStory Awake Rock Paper Scissors calculator.\"\n        />\n      </Helmet>\n      <div className={styles.header}>\n        <h1>Awake RPS Calculator</h1>\n        <button className={styles.reset} onClick={handleReset}>\n          Reset\n        </button>\n      </div>\n      <div className={styles.selectorContainer}>\n        <PlaySelector\n          name={Choices.ROCK}\n          numItem={numRock}\n          setNumItem={setNumRock}\n        />\n        <PlaySelector\n          name={Choices.PAPER}\n          numItem={numPaper}\n          setNumItem={setNumPaper}\n        />\n        <PlaySelector\n          name={Choices.SCISSORS}\n          numItem={numScissors}\n          setNumItem={setNumScissors}\n        />\n      </div>\n      <div className={styles.dataContainer}>\n        <h2>Results</h2>\n        <AnalysisSection\n          numRock={numRock}\n          numPaper={numPaper}\n          numScissors={numScissors}\n        />\n      </div>\n    </PageWrapper>\n  );\n}\n","import AwakeRpsPage from '../awake-rps/AwakeRpsPage';\n\nexport default AwakeRpsPage;\n"],"sourceRoot":""}